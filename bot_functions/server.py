"""
This file contains the main bot's structure
"""
from aiogram import Bot, Dispatcher, types, executor
from auxiliary_files.config import TOKEN

from bot_functions.markups import Markup

from bot_functions.currency_converter import CurrencyConverter
from database_handling.users_manager import UsersManager
from database_handling.xlsx_manager import ExcelManager

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
cur_user = UsersManager()
markup = Markup()

call_data_history = []


class Server:
    """
    Contains FinanceHunterBot's logic
    """

    def __init__(self):
        self.answer = None
        self.from_user = None
        self.data = None
        self.message = None
        self.text = None

    @dp.message_handler(commands=['start'])
    async def send_welcome(self: types.Message):
        """
        Answers /start command sent by user
        """
        text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {self.from_user.first_name}!\n" \
               f"–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç <b><i>–ë–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤</i></b>!"
        await bot.send_message(
            self.from_user.id,
            text=text,
            parse_mode='html', reply_markup=markup.start_markup())
        cur_user.register_user(self.from_user.id)

    @dp.message_handler(commands=['help'])
    async def send_help(self: types.Message):
        """
        Answers /help command sent by user
        """
        await bot.send_message(
            self.from_user.id,
            text=
            "<b><i>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</i></b>\n\n"
            "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ <u>–≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é</u>.\n"
            "- –ù–∞–∂–º–∏—Ç–µ <i>üìà –î–æ—Ö–æ–¥—ã</i>, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –¥–æ—Ö–æ–¥–∞—Ö;\n"
            "- –ù–∞–∂–º–∏—Ç–µ <i>üìâ –†–∞—Å—Ö–æ–¥—ã</i>, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö;\n"
            "- –ù–∞–∂–º–∏—Ç–µ <i>üí± –í–∞–ª—é—Ç–∞ —É—á—ë—Ç–∞</i>, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–∞–ª—é—Ç—É;\n"
            "- –ù–∞–∂–º–∏—Ç–µ <i>üìä –û—Ç—á—ë—Ç</i>, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏ –æ –¥–æ—Ö–æ–¥–∞—Ö / —Ä–∞—Å—Ö–æ–¥–∞—Ö",
            parse_mode='html', reply_markup=markup.start_markup())

    @dp.message_handler(commands=['delete'])
    async def delete_history(self: types.Message):
        """
        Deletes the finances' history of the user
        """
        cur_user.d_b.delete_history(user_id=self.from_user.id)
        await bot.send_message(
            self.from_user.id,
            text="–ó–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã!")

    @dp.callback_query_handler(lambda call:
                               call.data in ['cb_income', 'cb_expense', 'cb_currency', 'cb_report'])
    async def handle_start_cbq(self: types.CallbackQuery):
        """
        Handles the press of the initial 4 buttons of the bot
        """
        if self.data == 'cb_income':
            await self.message.answer(
                text='üìà –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=markup.income_markup())
        elif self.data == 'cb_expense':
            await self.message.answer(
                text='üìâ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=markup.expense_markup())
        elif self.data == 'cb_currency':
            await self.message.answer(text=f'üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É\n–í–∞–ª—é—Ç–∞ —Å–µ–π—á–∞—Å: '
                                           f'{cur_user.get_user_cur(self.from_user.id)}',
                                      reply_markup=markup.currency_markup())
        elif self.data == 'cb_report':
            await self.message.answer(
                text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á—ë—Ç:', reply_markup=markup.report_place_markup())

    @dp.callback_query_handler(text='back')
    async def send_menu(self: types.CallbackQuery):
        """
        Brings the user back to the main menu
        """
        await self.message.answer('üîé –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:', reply_markup=markup.start_markup())

    @dp.callback_query_handler(lambda callback_query:
                               callback_query.data in ['üìà –ó–∞—Ä–ø–ª–∞—Ç–∞',
                                                       'üìà –ü–æ—Å–æ–±–∏–µ',
                                                       'üìà –ü–µ–Ω—Å–∏—è',
                                                       'üìà –°–¥–∞—á–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –∞—Ä–µ–Ω–¥—É',
                                                       'üìà –°—Ç–∏–ø–µ–Ω–¥–∏—è',
                                                       '‚ûï –î—Ä—É–≥–æ–µ'])
    async def handle_income_cbq(self: types.CallbackQuery):
        """
        Handles income input
        """
        await self.message.answer(text='üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
        call_data_history.extend([self.data, 1])
        await self.message.delete()

    @dp.callback_query_handler(lambda callback_query:
                               callback_query.data in ['üõí –ü—Ä–æ–¥—É–∫—Ç—ã',
                                                       'üíä –ó–¥–æ—Ä–æ–≤—å–µ',
                                                       'üöå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
                                                       'üëï –û–¥–µ–∂–¥–∞, —Ç–æ–≤–∞—Ä—ã',
                                                       'üìÑ –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏',
                                                       'üöò –ê–≤—Ç–æ–º–æ–±–∏–ª—å',
                                                       'üìû –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ —Å–≤—è–∑—å',
                                                       'üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
                                                       'üè° –î–æ–º, —Ä–µ–º–æ–Ω—Ç',
                                                       'üè† –ê—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è',
                                                       'üåà –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
                                                       '‚ûñ –î—Ä—É–≥–æ–µ'])
    async def handle_expense_cbq(self: types.CallbackQuery):
        """
        Handles expense input
        """
        await self.message.answer(text='üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
        call_data_history.extend([self.data, -1])
        await self.message.delete()

    @dp.message_handler(content_types=['text'])
    async def get_sum(self: types.Message):
        """
        Checks the validity of the money input
        """
        if call_data_history:
            if self.text.isdigit():
                cur_user.add_user_record(user_id=self.from_user.id, category=call_data_history[0],
                                         operation=call_data_history[1], value=self.text)
                await bot.send_message(
                    self.from_user.id,
                    text='‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ!', reply_markup=markup.start_markup())
                call_data_history.clear()
            else:
                await bot.send_message(
                    self.from_user.id,
                    text='‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')

    @dp.callback_query_handler(lambda call: call.data in ['‚ÇΩ', '$', '‚Ç¨'])
    async def change_currency(self: types.CallbackQuery):
        """
        Handles the currency choices
        """
        cur_con = CurrencyConverter(cur_user.get_user_cur(self.from_user.id))
        if self.data == cur_user.get_user_cur(self.from_user.id):
            await self.message.answer(text="–≠—Ç–∞ –≤–∞–ª—é—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ–π—á–∞—Å!\n"
                                      "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ <i>üîô –ù–∞–∑–∞–¥</i>",
                                      parse_mode='html')
        else:
            cur_user.change_user_currency(user_id=self.from_user.id,
                                          new_cur=self.data,
                                          coef=cur_con.get_coef(self.data))
            await self.message.answer(text="‚úî –í–∞–ª—é—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞!",
                                      reply_markup=markup.start_markup())
            await self.message.delete()

    @dp.callback_query_handler(lambda call: call.data in ['here', 'there'])
    async def process_report_period(self: types.CallbackQuery):
        """
        Manages the finances' export in the required form
        """
        if self.data == 'here':
            await self.message.answer(
                text='üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á—ë—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥:', reply_markup=markup.report_period_markup()
            )
        elif self.data == 'there':
            excel = ExcelManager()
            excel.save_excel(user_id=self.from_user.id)
            await self.message.answer_document(types.InputFile('FinanceHunterBot.xlsx'),
                                               reply_markup=markup.start_markup())

    @dp.callback_query_handler(lambda call:
                               call.data in ['day', 'week', 'month', 'year', 'all_records'])
    async def send_statistics(self: types.CallbackQuery):
        """
        Addition to process_report_period,
        responsible for the period of the desired report,
        cur_user instance of UsersManager
        """
        if self.data == 'day':
            await self.message.answer(
                text=(cur_user.show_statistics(self.from_user.id, within='day')),
                parse_mode='html',
                reply_markup=markup.start_markup()
            )
        elif self.data == 'week':
            await self.message.answer(
                text=(cur_user.show_statistics(self.from_user.id, within='week')),
                parse_mode='html',
                reply_markup=markup.start_markup()
            )
        elif self.data == 'month':
            await self.message.answer(
                text=(cur_user.show_statistics(self.from_user.id, within='month')),
                parse_mode='html',
                reply_markup=markup.start_markup()
            )
        elif self.data == 'year':
            await self.message.answer(
                text=(cur_user.show_statistics(self.from_user.id, within='year')),
                parse_mode='html',
                reply_markup=markup.start_markup()
            )
        elif self.data == 'all_records':
            await self.message.answer(
                text=(cur_user.show_statistics(self.from_user.id, within='all')),
                parse_mode='html',
                reply_markup=markup.start_markup()
            )


def start():
    """
    Polls Server
    """
    executor.start_polling(dp, skip_updates=True)
